# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# UpdateIRISData.py
# Created on: 2016-12-13 14:12:07.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------

# Set the necessary product code
# import arcinfo


# Import arcpy module
import arcpy, os, sys, csv
arcpy.env.overwriteOutput = True
# Local variables:
Durham_Property = os.path.dirname(sys.argv[0]) + "wake.sde\\WAKE.DURHAM_SPLIT_PROPERTY"
Durham_Local = "in_memory\\DURHAM"

Wake_Property = os.path.dirname(sys.argv[0]) + "wake.sde\\WAKE.PROPERTY"
Wake_Property_Local = "in_memory\\WAKE"
All_Property = Wake_Property_Local
Property_Feature_Layer = "WAKE_Layer"
Raleigh_Selected = Property_Feature_Layer
Jurisdiction = os.path.dirname(sys.argv[0]) + "wake.sde\\WAKE.JURISDICTION"
Jurisdiction_Layer = "JURISDICTION_Layer"
Raleigh_Jurisdiction = Jurisdiction_Layer
Raleigh_Jurisdiction_Local = "in_memory\\JURISDICTION"
Raleigh_Property = "in_memory\\PROPERTY_Raleigh"
Centroid = "in_memory\\PROPERTY_CENTROID"
City = os.path.dirname(sys.argv[0]) + "wake.sde\\WAKE.CITY"
City_Layer = "CITY_Layer"
Raleigh_City = City_Layer
City_Local = "in_memory\\CITY"
City_Joined = "in_memory\\CITY_SpatialJoin"
City_Field_Added = City_Joined
City_Field_Calculated = City_Field_Added
City_Joined_Complete = City_Field_Calculated
City_Council = os.path.dirname(sys.argv[0]) + "raleigh.sde\\RALEIGH.CITY_COUNCIL"
City_Council_Local = "in_memory\\CITY_COUNCIL"
City_Council_Joined = "in_memory\\CITY_COUNCIL_SpatialJoin"
City_Council_Field_Added = City_Council_Joined
City_Council_Field_Calculated = City_Council_Field_Added
City_Council_Join_Complete = City_Council_Field_Calculated
CAC = os.path.dirname(sys.argv[0]) + "raleigh.sde\\RALEIGH.CAC"
CAC_Local = "in_memory\\CAC"
CAC_Joined = "in_memory\\CAC_SpatialJoin"
CAC_Field_Added = CAC_Joined
CAC_Field_Calculated = CAC_Field_Added
CAC_Join_Complete = CAC_Field_Calculated
Planning_Districts = os.path.dirname(sys.argv[0]) + "raleigh.sde\\RALEIGH.PLANNING_DISTRICTS"
Planning_Districts_Local = "in_memory\\PLANNING_DISTRICTS"
Planning_Districts_Joined = "in_memory\\PLANNING_DISTRICTS_SpatialJoin"
Planning_District_Field_Added = Planning_Districts_Joined
Planning_District_Field_Calculated = Planning_District_Field_Added
Planning_District_Join_Complete = Planning_District_Field_Calculated
Inspector_Areas = os.path.dirname(sys.argv[0]) + "raleigh.sde\\RALEIGH.INSPECTOR_AREAS"
Inspector_Areas_Local = "in_memory\\INSPECTOR_AREAS"
Inspector_Areas_Joined = "in_memory\\INSPECTOR_AREAS_SpatialJo"
Inspector_Field_Added = Inspector_Areas_Joined
Inspector_Field_Calculated = Inspector_Field_Added
Inspect_Areas_Join_Complete = Inspector_Field_Calculated
Throroughfare_Fee = os.path.dirname(sys.argv[0]) + "raleigh.sde\\RALEIGH.FACILITYFEE_TF_ZONES"
Throroughfare_Fee_Local = "in_memory\\FACILITYFEE_TF_ZONES"
Throroughfare_Free_Joined = "in_memory\\FACILITYFEE_TF_ZONES_SpatialJoin"
Throroughfare_Fee_Field_Added = Throroughfare_Free_Joined
Throroughfare_Fee_Field_Calculated = Throroughfare_Fee_Field_Added
Throroughfare_Fee_Join_Complete = Throroughfare_Fee_Field_Calculated
Open_Space_Fee = os.path.dirname(sys.argv[0]) + "raleigh.sde\\RALEIGH.FACILITYFEE_OS_ZONES"
Open_Space_Fee_Local = "in_memory\\FACILITYFEE_OS_ZONES"
Open_Space_Fee_Joined = "in_memory\\FACILITYFEE_OS_ZONES_SpatialJoin"
Open_Space_Fee_Field_Added = Open_Space_Fee_Joined
Open_Space_Fee_Field_Calculated = Open_Space_Fee_Field_Added
Open_Space_Fee_Join_Complete = Open_Space_Fee_Field_Calculated
Blocks = os.path.dirname(sys.argv[0]) + "raleigh.sde\\RALEIGH.IRIS\\RALEIGH.IRIS_BLOCKS"
Blocks_Local = "in_memory\\IRIS_BLOCKS"
Blocks_Joined = "in_memory\\IRIS_BLOCKS_SpatialJoin"
Blocks_Field_Added = Blocks_Joined
Blocks_Field_Calculated = Blocks_Field_Added
Blocks_Join_Complete = Blocks_Field_Calculated
Tracts = os.path.dirname(sys.argv[0]) + "raleigh.sde\\RALEIGH.IRIS\\RALEIGH.IRIS_TRACTS"
Tracts_Local = "in_memory\\IRIS_TRACTS"
#Tracts_Joined = "OUTPUT"
Tracts_Joined = "in_memory\\OUTPUT"
Tracts_Field_Added = Tracts_Joined
Tracts_Field_Calculated = Tracts_Field_Added
Join_Complete = Tracts_Field_Calculated
in_memory = "in_memory"
Delete_succeeded = "true"

print "Copy Durham Property"
arcpy.CopyFeatures_management(Durham_Property, Durham_Local, "", "0", "0", "0")

print "Copy Durham Property (2)"
arcpy.CopyFeatures_management(Wake_Property, Wake_Property_Local, "", "0", "0", "0")

print "Append Wake and Durham Property"
arcpy.Append_management("in_memory\\DURHAM", Wake_Property_Local, "NO_TEST", "PARCEL_PK \"PARCEL_PK\" true true false 4 Long 0 10 ,First,#,in_memory\\DURHAM,PARCEL_PK,-1,-1;PIN_NUM \"PIN_NUM\" true true false 11 Text 0 0 ,First,#,in_memory\\DURHAM,PIN_NUM,-1,-1;ACRES \"ACRES\" true true false 8 Double 8 38 ,First,#;SHAPE.AREA \"SHAPE.AREA\" false false true 0 Double 0 0 ,First,#,in_memory\\DURHAM,SHAPE.AREA,-1,-1;SHAPE.LEN \"SHAPE.LEN\" false false true 0 Double 0 0 ,First,#,in_memory\\DURHAM,SHAPE.LEN,-1,-1", "")

print "Make Property Feature Layer"
arcpy.MakeFeatureLayer_management(All_Property, Property_Feature_Layer, "", "", "OBJECTID OBJECTID VISIBLE NONE;PARCEL_PK PARCEL_PK VISIBLE NONE;PIN_NUM PIN_NUM VISIBLE NONE;ACRES ACRES VISIBLE NONE;SHAPE SHAPE VISIBLE NONE;SHAPE.AREA SHAPE.AREA VISIBLE NONE;SHAPE.LEN SHAPE.LEN VISIBLE NONE")

print "Make Jurisdiction Feature Layer"
arcpy.MakeFeatureLayer_management(Jurisdiction, Jurisdiction_Layer, "", "", "OBJECTID OBJECTID VISIBLE NONE;ACRES ACRES VISIBLE NONE;JURISDICTION JURISDICTION VISIBLE NONE;PLAN_JURIS PLAN_JURIS VISIBLE NONE;SHAPE SHAPE VISIBLE NONE;SHAPE.AREA SHAPE.AREA VISIBLE NONE;SHAPE.LEN SHAPE.LEN VISIBLE NONE")

print "Select Raleigh Jurisdiction"
arcpy.SelectLayerByAttribute_management(Jurisdiction_Layer, "NEW_SELECTION", "JURISDICTION = 'RALEIGH'")

print "Copy Raleigh Jurisdictions"
arcpy.CopyFeatures_management(Raleigh_Jurisdiction, Raleigh_Jurisdiction_Local, "", "0", "0", "0")

print "Select Layer By Location"
arcpy.SelectLayerByLocation_management(Property_Feature_Layer, "HAVE_THEIR_CENTER_IN", Raleigh_Jurisdiction_Local, "", "NEW_SELECTION", "NOT_INVERT")

print "Copy Raleigh Properties"
arcpy.CopyFeatures_management(Raleigh_Selected, Raleigh_Property, "", "0", "0", "0")

print "Generate Centroids"
arcpy.FeatureToPoint_management(Raleigh_Property, Centroid, "INSIDE")

print "Make City Feature Layer"
arcpy.MakeFeatureLayer_management(City, City_Layer, "", "", "OBJECTID OBJECTID VISIBLE NONE;SHAPE SHAPE VISIBLE NONE;SHORT_NAME SHORT_NAME VISIBLE NONE;LONG_NAME LONG_NAME VISIBLE NONE;ORDINANCE_NUMBER ORDINANCE_NUMBER VISIBLE NONE;EFFECTIVE_DATE EFFECTIVE_DATE VISIBLE NONE;SHAPE.AREA SHAPE.AREA VISIBLE NONE;SHAPE.LEN SHAPE.LEN VISIBLE NONE")

print "Select Raleigh"
arcpy.SelectLayerByAttribute_management(City_Layer, "NEW_SELECTION", "LONG_NAME = 'RALEIGH'")

print "Copy City"
arcpy.CopyFeatures_management(Raleigh_City, City_Local, "", "0", "0", "0")

print "Spatial Join City"
arcpy.SpatialJoin_analysis(Centroid, City_Local, City_Joined, "JOIN_ONE_TO_ONE", "KEEP_ALL", "PIN_NUM \"PIN_NUM\" true true false 11 Text 0 0 ,First,#,in_memory\\PROPERTY_CENTROID,PIN_NUM,-1,-1;LONG_NAME \"LONG_NAME\" true true false 30 Text 0 0 ,First,#,in_memory\\CITY,LONG_NAME,-1,-1", "INTERSECT", "", "")

print "Add City Field"
arcpy.AddField_management(City_Joined, "PARC_IN_OUT_CITY_LIMITS", "TEXT", "", "", "1", "", "NULLABLE", "NON_REQUIRED", "")

print "Calculate City Field"
arcpy.CalculateField_management(City_Field_Added, "PARC_IN_OUT_CITY_LIMITS", "SetCity(!Join_Count!)", "PYTHON", "def SetCity(count):\\n      if count == 0:\\n            return \"1\"\\n      else:\\n            return \"0\"")

print "Delete City Field"
arcpy.DeleteField_management(City_Field_Calculated, "Join_Count;TARGET_FID;LONG_NAME")

print "Copy City Council"
arcpy.CopyFeatures_management(City_Council, City_Council_Local, "", "0", "0", "0")

print "Spatial Join City Council"
arcpy.SpatialJoin_analysis(City_Joined_Complete, City_Council_Local, City_Council_Joined, "JOIN_ONE_TO_ONE", "KEEP_ALL", "PIN_NUM \"PIN_NUM\" true true false 11 Text 0 0 ,First,#,in_memory\\CITY_SpatialJoin,PIN_NUM,-1,-1;PARC_IN_OUT_CITY_LIMITS \"PARC_IN_OUT_CITY_LIMITS\" true true false 1 Text 0 0 ,First,#,in_memory\\CITY_SpatialJoin,PARC_IN_OUT_CITY_LIMITS,-1,-1;COUNCIL_DIST \"COUNCIL_DIST\" true true false 1 Text 0 0 ,First,#,in_memory\\CITY_COUNCIL,COUNCIL_DIST,-1,-1", "INTERSECT", "", "")

print "Add City Council Field"
arcpy.AddField_management(City_Council_Joined, "PARC_COUNCIL_DISTRICT", "TEXT", "", "", "1", "", "NULLABLE", "NON_REQUIRED", "")

print "Calculate City Council Field"
arcpy.CalculateField_management(City_Council_Field_Added, "PARC_COUNCIL_DISTRICT", "SetDistrict(!COUNCIL_DIST!)", "PYTHON", "def SetDistrict(district):\\n      if district:\\n            return district\\n      else:\\n            return \"X\"")

print "Delete City Council Field"
arcpy.DeleteField_management(City_Council_Field_Calculated, "Join_Count;TARGET_FID;COUNCIL_DIST")

print "Copy CAC"
arcpy.CopyFeatures_management(CAC, CAC_Local, "", "0", "0", "0")

print "Spatial Join CAC"
arcpy.SpatialJoin_analysis(City_Council_Join_Complete, CAC_Local, CAC_Joined, "JOIN_ONE_TO_ONE", "KEEP_COMMON", "", "INTERSECT", "", "")

print "Add CAC Field"
arcpy.AddField_management(CAC_Joined, "PARC_CAC", "TEXT", "", "", "1", "", "NULLABLE", "NON_REQUIRED", "")

print "Calculate CAC Field"
arcpy.CalculateField_management(CAC_Field_Added, "PARC_CAC", "SetCAC(!CAC_CODE!)", "PYTHON", "def SetCAC(cac):\\n      if cac:\\n            return cac\\n      else:\\n            return \"\"")

print "Delete CAC Field"
arcpy.DeleteField_management(CAC_Field_Calculated, "Join_Count;TARGET_FID;CAC_CODE")

print "Copy Planning Districts"
arcpy.CopyFeatures_management(Planning_Districts, Planning_Districts_Local, "", "0", "0", "0")

print "Spatial Join Planning Districts"
arcpy.SpatialJoin_analysis(CAC_Join_Complete, Planning_Districts_Local, Planning_Districts_Joined, "JOIN_ONE_TO_ONE", "KEEP_ALL", "", "INTERSECT", "", "")

print "Add Planning District Field"
arcpy.AddField_management(Planning_Districts_Joined, "PARC_COMPREHENSIVE_PLAN_DIST", "TEXT", "", "", "1", "", "NULLABLE", "NON_REQUIRED", "")

print "Calculate Planning District Field"
arcpy.CalculateField_management(Planning_District_Field_Added, "PARC_COMPREHENSIVE_PLAN_DIST", "SetDistrict(!DISTRICT_CODE!)", "PYTHON", "def SetDistrict(district):\\n      if district:\\n            return district\\n      else:\\n            return \"\"")

print "Delete Planning District Field"
arcpy.DeleteField_management(Planning_District_Field_Calculated, "Join_Count;TARGET_FID;DISTRICT_CODE")

print "Copy Inspector Areas"
arcpy.CopyFeatures_management(Inspector_Areas, Inspector_Areas_Local, "", "0", "0", "0")

print "Spatial Join Inspector Areas"
arcpy.SpatialJoin_analysis(Planning_District_Join_Complete, Inspector_Areas_Local, Inspector_Areas_Joined, "JOIN_ONE_TO_ONE", "KEEP_ALL", "", "INTERSECT", "", "")

print "Add Inspector Area Field"
arcpy.AddField_management(Inspector_Areas_Joined, "PARC_INSPECTION_AREA_ID", "TEXT", "", "", "3", "", "NULLABLE", "NON_REQUIRED", "")

print "Calculate Inspector Field"
arcpy.CalculateField_management(Inspector_Field_Added, "PARC_INSPECTION_AREA_ID", "SetArea(!INSPECT_NU!)", "PYTHON", "def SetArea(area):\\n      if area:\\n            return area\\n      else:\\n            return \"\"")

print "Delete Inspector Field"
arcpy.DeleteField_management(Inspector_Field_Calculated, "Join_Count;TARGET_FID;INSPECT_NU")

print "Copy Throroughfare Fee"
arcpy.CopyFeatures_management(Throroughfare_Fee, Throroughfare_Fee_Local, "", "0", "0", "0")

print "Spatial Join Throroughfare Fee"
arcpy.SpatialJoin_analysis(Inspect_Areas_Join_Complete, Throroughfare_Fee_Local, Throroughfare_Free_Joined, "JOIN_ONE_TO_ONE", "KEEP_ALL", "", "INTERSECT", "", "")

print "Add Throroughfare Fee Field"
arcpy.AddField_management(Throroughfare_Free_Joined, "PARC_THOROUGHFARE_ZONE_FEE", "TEXT", "", "", "1", "", "NULLABLE", "NON_REQUIRED", "")

print "Calculate Throroughfare Fee Field"
arcpy.CalculateField_management(Throroughfare_Fee_Field_Added, "PARC_THOROUGHFARE_ZONE_FEE", "SetArea(!ZONE!)", "PYTHON", "def SetArea(area):\\n      if area:\\n            return area\\n      else:\\n            return \"0\"")

print "Delete Throroughfare Fee Field"
arcpy.DeleteField_management(Throroughfare_Fee_Field_Calculated, "Join_Count;TARGET_FID;ZONE")

print "Copy Open Space Fee"
arcpy.CopyFeatures_management(Open_Space_Fee, Open_Space_Fee_Local, "", "0", "0", "0")

print "Spatial Join Open Space Fee"
arcpy.SpatialJoin_analysis(Throroughfare_Fee_Join_Complete, Open_Space_Fee_Local, Open_Space_Fee_Joined, "JOIN_ONE_TO_ONE", "KEEP_ALL", "", "INTERSECT", "", "")

print "Add Open Space Fee Field"
arcpy.AddField_management(Open_Space_Fee_Joined, "PARC_OPEN_SPACE_ZONE_FEE", "TEXT", "", "", "1", "", "NULLABLE", "NON_REQUIRED", "")

print "Calculate Open Space Fee Field"
arcpy.CalculateField_management(Open_Space_Fee_Field_Added, "PARC_OPEN_SPACE_ZONE_FEE", "SetArea(!ZONE_NUMBER!)", "PYTHON", "def SetArea(area):\\n      if area:\\n            return area\\n      else:\\n            return \"0\"")

print "Delete Open Space Fee Field"
arcpy.DeleteField_management(Open_Space_Fee_Field_Calculated, "Join_Count;TARGET_FID;ZONE_NUMBER;SHAPE_Length;SHAPE_Area")

print "Copy Blocks"
arcpy.CopyFeatures_management(Blocks, Blocks_Local, "", "0", "0", "0")

print "Spatial Join Blocks"
arcpy.SpatialJoin_analysis(Open_Space_Fee_Join_Complete, Blocks_Local, Blocks_Joined, "JOIN_ONE_TO_ONE", "KEEP_ALL", "", "INTERSECT", "", "")

print "Add Blocks Field"
arcpy.AddField_management(Blocks_Joined, "PARC_CENSUS_BLOCK_2010", "TEXT", "", "", "4", "", "NULLABLE", "NON_REQUIRED", "")

print "Calculate Blocks Field"
arcpy.CalculateField_management(Blocks_Field_Added, "PARC_CENSUS_BLOCK_2010", "SetArea(!BLOCKIRIS!)", "PYTHON", "def SetArea(area):\\n      if area:\\n            return area\\n      else:\\n            return \"\"")

print "Delete Blocks Field"
arcpy.DeleteField_management(Blocks_Field_Calculated, "Join_Count;TARGET_FID;BLOCKIRIS")

print "Copy Tracts"
arcpy.CopyFeatures_management(Tracts, Tracts_Local, "", "0", "0", "0")

print "Spatial Join Tracts"
arcpy.SpatialJoin_analysis(Blocks_Join_Complete, Tracts_Local, Tracts_Joined, "JOIN_ONE_TO_ONE", "KEEP_ALL", "PIN_NUM \"PIN_NUM\" true true false 11 Text 0 0 ,First,#,in_memory\\IRIS_BLOCKS_SpatialJoin,PIN_NUM,-1,-1;PARC_IN_OUT_CITY_LIMITS \"PARC_IN_OUT_CITY_LIMITS\" true true false 1 Text 0 0 ,First,#,in_memory\\IRIS_BLOCKS_SpatialJoin,PARC_IN_OUT_CITY_LIMITS,-1,-1;PARC_COUNCIL_DISTRICT \"PARC_COUNCIL_DISTRICT\" true true false 1 Text 0 0 ,First,#,in_memory\\IRIS_BLOCKS_SpatialJoin,PARC_COUNCIL_DISTRICT,-1,-1;PARC_CAC \"PARC_CAC\" true true false 1 Text 0 0 ,First,#,in_memory\\IRIS_BLOCKS_SpatialJoin,PARC_CAC,-1,-1;PARC_COMPREHENSIVE_PLAN_DIST \"PARC_COMPREHENSIVE_PLAN_DIST\" true true false 1 Text 0 0 ,First,#,in_memory\\IRIS_BLOCKS_SpatialJoin,PARC_COMPREHENSIVE_PLAN_DIST,-1,-1;PARC_INSPECTION_AREA_ID \"PARC_INSPECTION_AREA_ID\" true true false 3 Text 0 0 ,First,#,in_memory\\IRIS_BLOCKS_SpatialJoin,PARC_INSPECTION_AREA_ID,-1,-1;PARC_THOROUGHFARE_ZONE_FEE \"PARC_THOROUGHFARE_ZONE_FEE\" true true false 1 Text 0 0 ,First,#,in_memory\\IRIS_BLOCKS_SpatialJoin,PARC_THOROUGHFARE_ZONE_FEE,-1,-1;PARC_OPEN_SPACE_ZONE_FEE \"PARC_OPEN_SPACE_ZONE_FEE\" true true false 1 Text 0 0 ,First,#,in_memory\\IRIS_BLOCKS_SpatialJoin,PARC_OPEN_SPACE_ZONE_FEE,-1,-1;PARC_CENSUS_BLOCK_2010 \"PARC_CENSUS_BLOCK_2010\" true true false 4 Text 0 0 ,First,#,in_memory\\IRIS_BLOCKS_SpatialJoin,PARC_CENSUS_BLOCK_2010,-1,-1;TRACTIRIS \"TRACTIRIS\" true true false 6 Text 0 0 ,First,#,in_memory\\IRIS_TRACTS,TRACTIRIS,-1,-1", "INTERSECT", "", "")

print "Add Tracts Field"
arcpy.AddField_management(Tracts_Joined, "PARC_CENSUS_TRACT_2010", "TEXT", "", "", "6", "", "NULLABLE", "NON_REQUIRED", "")

print "Calculate Tracts Field"
arcpy.CalculateField_management(Tracts_Field_Added, "PARC_CENSUS_TRACT_2010", "SetArea(!TRACTIRIS!)", "PYTHON", "def SetArea(area):\\n      if area:\\n            return area\\n      else:\\n            return \"\"")

print "Delete Tracts Field"
arcpy.DeleteField_management(Tracts_Field_Calculated, "Join_Count;TARGET_FID;TRACTIRIS")

outputs = []
fields =  ["PIN_NUM","PARC_IN_OUT_CITY_LIMITS","PARC_COUNCIL_DISTRICT","PARC_CAC","PARC_COMPREHENSIVE_PLAN_DIST","PARC_INSPECTION_AREA_ID","PARC_THOROUGHFARE_ZONE_FEE","PARC_OPEN_SPACE_ZONE_FEE","PARC_CENSUS_BLOCK_2010","PARC_CENSUS_TRACT_2010"]
cursor = arcpy.da.SearchCursor(Tracts_Joined, fields)
#for row in cursor:
#        outputs.append(row)
with open(os.path.dirname(sys.argv[0]) + 'parcels.csv', 'wb') as csvfile:
        writer = csv.writer(csvfile, delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL)
        for row in cursor:
                writer.writerow(row)
print "Delete"
arcpy.Delete_management(in_memory, "Workspace")
